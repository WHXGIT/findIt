<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cogitationsoft.findit.mapper.UserMapper">
	<!--<resultMap id="userResultMap" type="User">
		<result property="protectPhone" column="protect_phone" javaType="java.lang.String" jdbcType="VARCHAR"/>
		<result property="userId" column="user_id" javaType="java.lang.String" jdbcType="VARCHAR"/>
		<result property="registerTime" column="register_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
		<result property="funName" column="fun_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
		<result property="avatarPath" column="avatar_path" javaType="java.lang.String" jdbcType="VARCHAR"/>
	</resultMap>-->
	<insert id="create" parameterType="UserDO" flushCache="true" statementType="PREPARED">
		INSERT INTO t_user
		( user_id, username, password, nickname, phone, head_img,register_time)
		VALUES
		(UUID(),#{username},#{password},#{nickname},#{phone}, #{headImg},#{registerTime})
	</insert>

	<update id="update" parameterType="UserDO" flushCache="true" statementType="PREPARED" timeout="20">
		UPDATE t_user
		<set>
			<if test='nickname != null and nickname != ""'>
				nickname = #{nickname},
			</if>
			<if test='phone != null and phone != ""'>
				phone = #{phone},
			</if>
			<if test='otherConnect != null and otherConnect != ""'>
				other_connect = #{otherConnect},
			</if>
			<if test='sex != null and sex != ""'>
				sex = #{sex},
			</if>
			<if test='age != null and age != ""'>
				age = #{age}
			</if>
		</set>
		<where>
			user_id = #{userId}
		</where>
	</update>

	<select id="getUserDO" resultType="UserDO" parameterType="UserDO" flushCache="false" useCache="true"
	        timeout="10" fetchSize="256" statementType="PREPARED" resultSetType="FORWARD_ONLY">
		SELECT * FROM t_user
		<where>
			<if test='userId != null and userId != ""'>
				user_id = #{userId}
			</if>
			<if test='username != null and username != null'>
				AND username = #{username}
			</if>
			<if test='password != null and password != ""'>
				AND password = #{password}
			</if>
		</where>
	</select>

	<select id="readById" resultType="UserDO" parameterType="String" flushCache="false" useCache="true"
	        timeout="10" fetchSize="256" statementType="PREPARED" resultSetType="FORWARD_ONLY">
		SELECT * FROM t_user WHERE user_id = #{userId}
	</select>

	<delete id="delete" parameterType="String" flushCache="true" statementType="PREPARED" timeout="20">

	</delete>

	<update id="updateHeadPath" parameterType="UserDO" flushCache="true" statementType="PREPARED" timeout="20">
		UPDATE t_user SET head_img = #{headImg} WHERE user_id = #{userId}
	</update>


	<select id="getDuringDays" resultType="java.time.LocalDateTime" parameterType="String" flushCache="false"
	        useCache="true"
	        timeout="10" fetchSize="256" statementType="PREPARED" resultSetType="FORWARD_ONLY">
		SELECT register_time FROM t_user WHERE user_id = #{id}
	</select>

	<select id="getAllPublishCred" resultType="Integer" parameterType="String" flushCache="false" useCache="true"
	        timeout="10" fetchSize="256" statementType="PREPARED" resultSetType="FORWARD_ONLY">
		SELECT COUNT(*) FROM t_user_credential WHERE user_id = #{id}
	</select>
	<select id="getAllFinishCred" resultType="Integer" parameterType="String" flushCache="false" useCache="true"
	        timeout="10" fetchSize="256" statementType="PREPARED" resultSetType="FORWARD_ONLY">
		SELECT
		COUNT(t_credential.cred_id)
		FROM
	t_user_credential
	LEFT JOIN t_credential ON t_credential.cred_id = t_user_credential.cred_id
	where cred_type= '1'
	GROUP BY
	user_id
	HAVING user_id = #{id}
	</select>

	<select id="getAllGetLetter" resultType="Integer" parameterType="String" flushCache="false" useCache="true"
	        timeout="10" fetchSize="256" statementType="PREPARED" resultSetType="FORWARD_ONLY">
	SELECT
	count(*)
	FROM
	t_user
	LEFT JOIN t_user_letter ON t_user.user_id = t_user_letter.user_id
	LEFT JOIN t_letter ON t_letter.letter_id = t_user_letter.letter_id
	WHERE to_name = t_user.nickname
	GROUP BY
	t_user.user_id
	HAVING
	t_user.user_id = #{id}
	</select>
	<select id="getAllSentLetter" resultType="Integer" parameterType="String" flushCache="false" useCache="true"
	        timeout="10" fetchSize="256" statementType="PREPARED" resultSetType="FORWARD_ONLY">
	SELECT
	count(*)
	FROM
	t_user
	LEFT JOIN t_user_letter ON t_user.user_id = t_user_letter.user_id
	LEFT JOIN t_letter ON t_letter.letter_id = t_user_letter.letter_id
	WHERE create_name = t_user.nickname
	GROUP BY
	t_user.user_id
	HAVING
	t_user.user_id = #{id}
	</select>

	<select id="getAllCommentCred" resultType="Integer" parameterType="String" flushCache="false" useCache="true"
	        timeout="10" fetchSize="256" statementType="PREPARED" resultSetType="FORWARD_ONLY">
			SELECT
	COUNT( comment_id )
FROM
	t_user
	LEFT JOIN t_comment ON t_user.user_id = t_comment.comment_user_id
GROUP BY
	user_id
HAVING
	t_user.user_id = #{id}
	</select>

	<select id="getAllMocriReward" resultType="Integer" parameterType="String" flushCache="false" useCache="true"
	        timeout="10" fetchSize="256" statementType="PREPARED" resultSetType="FORWARD_ONLY">
		SELECT
	SUM(micro_reward)
	FROM
	t_credential LEFT JOIN
	t_user_credential ON t_credential.cred_id = t_user_credential.cred_id
	WHERE
	user_id = #{id} AND cred_type = '1'
	</select>

	<select id="listUser" resultType="UserDO" parameterType="UserDO" flushCache="false" useCache="true">
		SELECT * FROM t_user
		<where>
			<if test='state != null and state != ""'>
				state = #{state}
			</if>
		</where>
	</select>

	<update id="forbidUser" parameterType="String" flushCache="true" statementType="PREPARED" timeout="20">
	UPDATE t_user SET state = '2' WHERE user_id = #{userId}
</update>
</mapper>